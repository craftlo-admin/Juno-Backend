generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for deployment strategy support
enum DeploymentStrategy {
  individual
  shared
}

enum SubscriptionTier {
  standard
  premium
  enterprise
}

enum TrafficTier {
  low
  normal
  high
  enterprise
}

model User {
  id                     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                  String         @unique
  passwordHash           String         @map("password_hash")
  firstName              String         @map("first_name")
  lastName               String         @map("last_name")
  role                   String         @default("user")
  emailVerified          Boolean        @default(false) @map("email_verified")
  emailVerificationToken String?        @map("email_verification_token")
  emailVerifiedAt        DateTime?      @map("email_verified_at")
  lastLoginAt            DateTime?      @map("last_login_at")
  createdAt              DateTime       @default(now()) @map("created_at")
  updatedAt              DateTime       @updatedAt @map("updated_at")
  
  // Relations
  auditLogs              AuditLog[]
  tenants                Tenant[]
  uploadedFiles          UploadedFile[]
  tenantMemberships      TenantMember[]
  builds                 Build[]
  createdProjects        Project[]      @relation("ProjectCreator") // Added: Projects created by this user

  @@index([email])
  @@index([emailVerified]) // Added: Index for email verification queries
  @@index([role]) // Added: Index for role-based queries
  @@map("users")
}

model Tenant {
  id                        String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId                  String              @unique @map("tenant_id")
  ownerId                   String              @map("owner_id") @db.Uuid
  name                      String
  status                    String              @default("pending")
  domain                    String              @unique // Added unique constraint to prevent domain conflicts
  customDomain              String?             @unique @map("custom_domain") // Added unique constraint
  currentVersion            String?             @map("current_version")
  buildArtifactPath         String?             @map("build_artifact_path")
  description               String?
  config                    Json                @default("{}")
  buildSettings             Json                @default("{}") @map("build_settings")
  
  // CloudFront Distribution fields for tenant-specific distributions
  cloudfrontDistributionId  String?             @unique @map("cloudfront_distribution_id") // Added unique constraint
  cloudfrontDomain          String?             @unique @map("cloudfront_domain") // Added unique constraint
  cloudfrontStatus          String?             @map("cloudfront_status")
  cloudfrontUniqueId        String?             @unique @map("cloudfront_unique_id") // Added unique constraint
  cloudfrontCreatedAt       DateTime?           @map("cloudfront_created_at")
  
  // Primary domain used for deployments (custom domain or CloudFront)
  primaryDomain             String?             @unique @map("primary_domain") // Added unique constraint
  
  // Deployment Strategy Configuration (NEW)
  deploymentStrategy        DeploymentStrategy? @map("deployment_strategy")
  subscriptionTier          SubscriptionTier    @default(standard) @map("subscription_tier")
  planType                  SubscriptionTier    @default(standard) @map("plan_type")
  trafficTier               TrafficTier         @default(normal) @map("traffic_tier")
  monthlyPageViews          Int                 @default(0) @map("monthly_page_views")
  complianceRequirements    String[]            @map("compliance_requirements")
  
  lastDeployedAt            DateTime?           @map("last_deployed_at")
  createdAt                 DateTime            @default(now()) @map("created_at")
  updatedAt                 DateTime            @updatedAt @map("updated_at")
  
  // Relations
  auditLogs                 AuditLog[]
  builds                    Build[]
  deployments               Deployment[]
  projects                  Project[]
  members                   TenantMember[]
  owner                     User                @relation(fields: [ownerId], references: [id], onDelete: Restrict) // Changed to Restrict for safety

  @@index([tenantId])
  @@index([ownerId])
  @@index([status])
  @@index([domain])
  @@index([customDomain]) // Added: Index for custom domain lookups
  @@index([cloudfrontDistributionId])
  @@index([deploymentStrategy])
  @@index([subscriptionTier])
  @@index([trafficTier])
  @@index([subscriptionTier, deploymentStrategy, trafficTier], name: "strategy_selection_idx")
  @@index([status, subscriptionTier]) // Added: Composite index for filtering active tenants by tier
  @@map("tenants")
}

model Build {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId     String       @map("tenant_id")
  userId       String       @map("user_id") @db.Uuid
  version      String
  status       String       @default("pending")
  framework    String?      // nextjs, react, vue, static
  sourceFile   String?      @map("source_file")
  buildCommand String?      @map("build_command")
  outputDir    String?      @map("output_dir")
  nodeVersion  String?      @map("node_version")
  uploadPath   String?      @map("upload_path")
  buildPath    String?      @map("build_path")
  logsPath     String?      @map("logs_path")
  errorMessage String?      @map("error_message")
  buildConfig  Json?        @map("build_config")
  metadata     Json         @default("{}")
  startedAt    DateTime?    @map("started_at")
  finishedAt   DateTime?    @map("finished_at")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  projectId    String?      @map("project_id") @db.Uuid
  
  // Relations
  project      Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull) // Changed to SetNull for safety
  tenant       Tenant       @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Restrict) // Changed to Restrict for audit trail
  deployments  Deployment[]

  @@index([tenantId])
  @@index([userId])
  @@index([projectId])
  @@index([status])
  @@index([version])
  @@index([framework]) // Added: Index for framework-based queries
  @@index([tenantId, startedAt])
  @@index([tenantId, status, createdAt]) // Added: Composite index for tenant build status queries
  @@index([userId, status]) // Added: Index for user build history
  @@map("builds")
}

model Deployment {
  id                       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId                 String   @map("tenant_id")
  version                  String
  buildId                  String?  @map("build_id") @db.Uuid
  status                   String   @default("active")
  deployer                 String?
  notes                    String?
  deploymentConfig         Json?    @map("deployment_config")
  cloudfrontInvalidationId String?  @map("cloudfront_invalidation_id")
  deployedAt               DateTime @default(now()) @map("deployed_at")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")
  projectId                String?  @map("project_id") @db.Uuid
  
  // Relations
  build                    Build?   @relation(fields: [buildId], references: [id], onDelete: SetNull) // Changed to SetNull for safety
  project                  Project? @relation(fields: [projectId], references: [id], onDelete: SetNull) // Changed to SetNull for safety
  tenant                   Tenant   @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)

  @@index([tenantId])
  @@index([projectId])
  @@index([status])
  @@index([buildId])
  @@index([version]) // Added: Index for version-based queries
  @@index([deployer]) // Added: Index for deployer-based queries
  @@index([tenantId, deployedAt])
  @@index([tenantId, status, deployedAt]) // Added: Composite index for tenant deployment status queries
  @@index([projectId, deployedAt]) // Added: Index for project deployment history
  @@map("deployments")
}

model AuditLog {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId     String?  @map("tenant_id")
  userId       String?  @map("user_id") @db.Uuid
  action       String
  resourceType String?  @map("resource_type")
  resourceId   String?  @map("resource_id")
  details      Json     @default("{}")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  tenant       Tenant?  @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)
  user         User?    @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model UploadedFile {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  s3Key       String   @unique
  s3Bucket    String
  url         String   @unique // Added unique constraint to prevent URL conflicts
  description String?
  tags        String[]
  isPublic    Boolean  @default(false)
  metadata    Json?
  userId      String   @db.Uuid
  projectId   String?  @db.Uuid
  uploadedAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull) // Changed to SetNull for safety
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([uploadedAt])
  @@index([mimeType])
  @@index([isPublic]) // Added: Index for public file queries
  @@index([s3Bucket]) // Added: Index for bucket-based queries
  @@index([fileSize]) // Added: Index for size-based queries and cleanup
  @@index([userId, uploadedAt]) // Added: Composite index for user file history
  @@map("uploaded_files")
}

model Project {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String?
  zipFileKey    String?        @map("zip_file_key") // Added: ZIP file reference for project source
  status        String         @default("ACTIVE") // Added: Project status (ACTIVE, INACTIVE, DELETED)
  settings      Json           @default("{}")
  tenantId      String         @map("tenant_id")
  createdBy     String         @map("created_by") @db.Uuid // Added: User who created the project
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  
  // Relations
  builds        Build[]
  deployments   Deployment[]
  tenant        Tenant         @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)
  creator       User           @relation("ProjectCreator", fields: [createdBy], references: [id], onDelete: Restrict) // Added relation
  uploadedFiles UploadedFile[]

  @@index([tenantId])
  @@index([createdBy]) // Added: Index for creator queries
  @@index([status]) // Added: Index for status filtering
  @@index([name])
  @@index([tenantId, createdAt])
  @@index([tenantId, status]) // Added: Composite index for tenant + status queries
  @@map("projects")
}

model TenantMember {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId  String   @map("tenant_id")
  userId    String   @map("user_id") @db.Uuid
  role      String   @default("member") // owner, admin, member
  status    String   @default("active") // active, inactive, pending
  joinedAt  DateTime @default(now()) @map("joined_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tenantId, userId])
  @@index([tenantId])
  @@index([userId])
  @@index([role])
  @@index([status])
  @@map("tenant_members")
}

// Schema fixes have been applied - see documentation for details
